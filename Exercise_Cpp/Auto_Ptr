
template<typename T>
class Auto_Ptr
{
	//当有一个构造函数之后 就不会调用默认构造，除非显式定义
public:
	Auto_Ptr<T>(T *p) : p_val(p), p_cnt(new P_Cnt(1)){}
	Auto_Ptr<T>() : p_val(nullptr), p_cnt(new P_Cnt(0)){}
	~Auto_Ptr();
	T& operator*(){ return *p_val; }
	T* operator->(){ return p_val; }
	Auto_Ptr<T>(const Auto_Ptr &other);
	Auto_Ptr<T>& operator=(const Auto_Ptr<T> &other);
	int userCount(){ return p_cnt->count; }
	void reset(T* newOne = nullptr);
	bool unique();
	
private:
	class P_Cnt{
	public:
		P_Cnt(int val) :count(val){}
		~P_Cnt(){}
	private:
		friend Auto_Ptr;
		int count;
	};

	P_Cnt *p_cnt;
	T *p_val;
};

template<typename T>
Auto_Ptr<T>::~Auto_Ptr(){
	if (--p_cnt->count <= 0){
		if (p_cnt){
			delete p_cnt;
			p_cnt = nullptr;
		}
		if (p_val){
			delete p_val;
			p_val = nullptr;
		}
	}
}

template<typename T>
Auto_Ptr<T>::Auto_Ptr(const Auto_Ptr &other){
	p_val = other.p_val;
	++other.p_cnt->count;
	p_cnt = other.p_cnt;
}


template<typename T>
Auto_Ptr<T>& Auto_Ptr<T>::operator=(const Auto_Ptr &other){
	if (--p_cnt->count <= 0){
		if (p_cnt){
			delete p_cnt;
			p_cnt = nullptr;
		}
		if (p_val){
			delete p_val;
			p_val = nullptr;
		}
	}
	p_val = other.p_val;
	++other.p_cnt->count;
	p_cnt = other.p_cnt;
	return *this;
}

template<typename T>
void Auto_Ptr<T>::reset(T* newOne = nullptr){
	if (--p_cnt->count <= 0){
		if (p_cnt){
			delete p_cnt;
			p_cnt = nullptr;
		}
		if (p_val){
			delete p_val;
			p_val = nullptr;
		}
	}
	p_val = newOne;
	if(newOne)p_cnt = new P_Cnt(1);
	else p_cnt = new P_Cnt(0);
}

template<typename T>
bool Auto_Ptr<T>::unique(){
	return p_cnt == 1;
}

